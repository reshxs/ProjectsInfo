@model ProjectsInfo.Models.Employes.Manager

@{
    ViewData["Title"] = "Добавить менеджера";
}

<div class="margintitle">
    <h1 class="titleview">Добавить менеджера</h1>
</div>
<div class="row">
    <div class="col-md-4 centercontent">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Salary" class="control-label"></label>
                <input asp-for="Salary" class="form-control" />
                <span asp-validation-for="Salary" class="text-danger"></span>
            </div>
            <div class="form-group rowbtn">
                <input type="submit" value="Добавить" class="btn btn-primary" />
                <a asp-action="Index">
                    <button type="button" class="btn waves-effect waves-light btn-block btn-danger backbtn">
                        Назад
                    </button>
                </a>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // переопределение валидации на стороне клиента
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
    </script>
}
