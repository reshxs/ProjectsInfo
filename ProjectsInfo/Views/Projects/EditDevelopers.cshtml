@using ProjectsInfo.Controllers
@using Microsoft.VisualStudio.Web.CodeGeneration
@model ProjectsInfo.Models.Project

@{
    ViewData["Title"] = "Разработчики";
}

<h1 class="titleview">Разраоботчики</h1>


<div class="fix-header card-no-border">
    <div class="container-fluid">
        <div class="m-t-40">
            <div class="d-flex">
                <div class="mr-auto">
                    <div class="form-group">
                        <button id="demo-btn-addrow" class="btn btn-primary adddevbtn">
                            Добавить разработчика
                        </button>
                    </div>
                </div>
                <div class="ml-auto">
                    <div class="form-group">
                        <input id="demo-input-search2" type="text" placeholder="Поиск" autocomplete="off">
                    </div>
                </div>
            </div>
        </div>
        <div class="table-responsive tablespace">
            <table id="demo-foo-addrow2" class="table table-bordered table-hover toggle-circle" data-page-size="7">
                <thead>
                    <tr>
                        <th data-sort-initial="true" data-toggle="true">Разработчик</th>
                        @foreach (var month in Model.MonthCollection)
                        {
                            <th data-hide="phone, tablet">@month</th>
                        }
                        <th data-hide="phone, tablet">Сумма</th>
                        <th data-sort-ignore="true" class="min-width">Удалить</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var developerAssignment in Model.DeveloperAssignments)
                    {
                        <tr>
                            <td><div id="@developerAssignment.DeveloperID">@developerAssignment.Developer.Name</div></td>
                            @foreach (var month in developerAssignment.Months)
                            {
                                <td data-monthid="@month.ID" class="change">@month.Hours</td>
                            }
                            @if (developerAssignment.Months.Count < Model.MonthsCount)
                            {
                                for (var i = developerAssignment.Months.Count; i < Model.MonthsCount; i++)
                                {
                                    <td data-devid="@developerAssignment.DeveloperID" data-prid="@developerAssignment.ProjectID" data-date="@Model.MonthCollection.ElementAt(i)" class="change">0</td>
                                }
                            }
                            <td>@developerAssignment.TotalHours</td>
                            <td><button type="button" class="btn btn-sm btn-icon btn-pure btn-outline delete-row-btn" data-toggle="tooltip" data-original-title="Delete"><i class="ti-close" aria-hidden="true"></i></button></td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="@(Model.MonthsCount+3)">
                            <div class="text-right">
                                <ul class="pagination pagright">
                                </ul>
                            </div>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="table-responsive">
            <table id="demo-foo-addrow3" class="table table-bordered table-hover toggle-circle" data-page-size="1">
                <thead>
                    <tr>
                        <th data-sort-initial="true" data-toggle="true"></th>
                        @foreach (var month in Model.MonthCollection)
                        {
                            <th data-hide="phone, tablet">@month</th>
                        }
                        <th data-hide="phone, tablet">Общая сумма</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Часов в месяц</td>
                        @foreach (var month in Model.MonthsTotals)
                        {
                            <td>@month</td>
                        }
                        <td>@Model.TotalHours</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="form-group rowbtn">
            <input type="submit" value="Save" class="btn btn-primary" />
            <a asp-action="Index">
                <button type="button" class="btn waves-effect waves-light btn-block btn-danger backbtn">
                    Back
                </button>
            </a>
        </div>
    </div>
</div>
<script>

            var table = document.querySelector('table');

            table.addEventListener('click', function func(event) {
                var td = event.target.closest('td.change');
                if (!td) return;
                var inputAttached = td.querySelector('input');
                if (inputAttached) return;

                var input = document.createElement('input');
                var button = document.createElement('button');

                input.value = td.innerHTML;
                input.style.width = '100px';
                td.innerHTML = '';
                td.appendChild(input);
                input.focus();
                
                button.innerText = 'Ok'
                button.className = 'btn waves-effect waves-light btn-block btn-primary acceptbtn'
                button.id = 'accept-input'
                td.appendChild(button)
                
                button.addEventListener('click', function() {
                	if (td.hasAttribute("data-monthid")) {
                		let model = {
                			'monthId': td.dataset.monthid,
                			'hours': input.value
                		}
                		console.log(model)
                		$.post('@Url.Action("UpdateMonth", "Ajax")/' + model.monthId, model, function (data){
                			console.log(data)
                		})
                		
                	} else {
                		let model = {
                			'Hours': parseInt(input.value),
                			'Date': td.dataset.date,
                			'DeveloperId': parseInt(td.dataset.devid),
                			'ProjectId': parseInt(td.dataset.prid)
                		}
                		console.log(model)
                		td.id = 'qwerty'
                		let monthId = $.post('@Url.Action("AddMonth", "Ajax")/' + td.dataset.prid, model, function (data){
                			console.log(data)
                		})
                		console.log(monthId)
                		td.id = ''
                		//td.dataset.monthid = monthId.responseJSON.id
                	}
                	td.innerHTML = input.value;
                });
            });

            var countadd = @Model.MonthsCount;
            
        </script>

@section Scripts {

	<script>    
$(window).on('load', function() {
	
	// Row Toggler
	// -----------------------------------------------------------------
	$('#demo-foo-row-toggler').footable();

	// Accordion
	// -----------------------------------------------------------------
	$('#demo-foo-accordion').footable().on('footable_row_expanded', function(e) {
		$('#demo-foo-accordion tbody tr.footable-detail-show').not(e.row).each(function() {
			$('#demo-foo-accordion').data('footable').toggleDetail(this);
		});
	});

	// Pagination
	// -----------------------------------------------------------------
	$('#demo-foo-pagination').footable();
	$('#demo-show-entries').change(function (e) {
		e.preventDefault();
		var pageSize = $(this).val();
		$('#demo-foo-pagination').data('page-size', pageSize);
		$('#demo-foo-pagination').trigger('footable_initialized');
	});

	// Filtering
	// -----------------------------------------------------------------
	var filtering = $('#demo-foo-filtering');
	filtering.footable().on('footable_filtering', function (e) {
		var selected = $('#demo-foo-filter-status').find(':selected').val();
		e.filter += (e.filter && e.filter.length > 0) ? ' ' + selected : selected;
		e.clear = !e.filter;
	});

	// Filter status
	$('#demo-foo-filter-status').change(function (e) {
		e.preventDefault();
		filtering.trigger('footable_filter', {filter: $(this).val()});
	});

	// Search input
	$('#demo-foo-search').on('input', function (e) {
		e.preventDefault();
		filtering.trigger('footable_filter', {filter: $(this).val()});
	});


	

	// Search input
	$('#demo-input-search2').on('input', function (e) {
		e.preventDefault();
		addrow.trigger('footable_filter', {filter: $(this).val()});
	});
	
	// Add & Remove Row
	var addrow = $('#demo-foo-addrow');
	addrow.footable().on('click', '.delete-row-btn', function() {
		
		//get the footable object
		var footable = addrow.data('footable');

		//get the row we are wanting to delete
		var row = $(this).parents('tr:first');
		developerId = row.children().first().children().last().attr('id')
		
		//delete the row
		footable.removeRow(row);
		
		console.log(developerId)
		$.post('@Url.Action("RemoveDeveloper", "Ajax")?id=' + @Model.ID, {'projectID': @Model.ID, 'developerId': developerId})
	});
    var addrow = $('#demo-foo-addrow2');
	addrow.footable().on('click', '.delete-row-btn', function(event) {

		//get the footable object
		var footable = addrow.data('footable');

		//get the row we are wanting to delete
		var row = $(this).parents('tr:first');
		developerId = row.children().first().children().last().attr('id')
		
		//delete the row
		footable.removeRow(row);
		
		console.log(developerId)
		$.post('@Url.Action("RemoveDeveloper", "Ajax")?id=' + @Model.ID, {'projectID': @Model.ID, 'developerId': developerId})
	});
	// Add Row Button
	$('#demo-btn-addrow').click(function() {
		// Getting developers list
		$.get('@Url.Action("GetNotAssignedDevelopers", "Ajax")?id='+@Model.ID, function (data) {
			//populate list of tags with developers
			var developers = ''
			for (let i = 0; i < data.length; i++)
			{
				developers += '<button class="dropdown-item" id=' + data[i].developerID +'>' + data[i].name + '</button>\n'
			}
			
			//get the footable object
			var footable = addrow.data('footable');

			//build up the row we are wanting to add

			let rows = '';
			for (var i = 0; i < countadd; i++) {
				rows += '<td class="change">0</td>'
			}

			var newRow = '<tr><td><div id="adddeveloper"><div class="btn-group">\n' +
				'<button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n' +
				'      Выбрать разработчика\n' +
				'</button>\n' +
				'<div class="dropdown-menu">\n' +
						developers +
				' </div>\n' +
				' </div></div></td>';
			newRow += rows;
			newRow += '<td>0</td><td><button type="button" class="btn btn-sm btn-icon btn-pure btn-outline delete-row-btn" data-toggle="tooltip" data-original-title="Delete"><i class="ti-close" aria-hidden="true"></i></button></td></tr>'

			//add it
			footable.appendRow(newRow);
		})
	});
	$(document).on('click', '.dropdown-item', function (event){
		console.log(event.currentTarget)
		var developerId = event.currentTarget.id
        console.log(developerId)
        var name = $(event.currentTarget).text()
		$.post('@Url.Action("AddDeveloper", "Ajax")/' + @Model.ID,{'projectId': @Model.ID, 'developerId': developerId}, function (data) {
			$('#adddeveloper').replaceWith('<div id=' + developerId + '>' + name + '<\div>')
            		console.log(name)
		})
	});
});

    </script>
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
