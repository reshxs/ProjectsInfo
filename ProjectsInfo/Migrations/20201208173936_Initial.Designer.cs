// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectsInfo.Data;

namespace ProjectsInfo.Migrations
{
    [DbContext(typeof(ProjectsInfoContext))]
    [Migration("20201208173936_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ProjectsInfo.Models.Developer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("ProjectsInfo.Models.DeveloperAssignment", b =>
                {
                    b.Property<int>("ProjectID")
                        .HasColumnType("integer");

                    b.Property<int>("DeveloperID")
                        .HasColumnType("integer");

                    b.HasKey("ProjectID", "DeveloperID");

                    b.HasIndex("DeveloperID");

                    b.ToTable("DeveloperAssignments");
                });

            modelBuilder.Entity("ProjectsInfo.Models.Month", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeveloperAssignmentDeveloperID")
                        .HasColumnType("integer");

                    b.Property<int>("DeveloperAssignmentID")
                        .HasColumnType("integer");

                    b.Property<int>("DeveloperAssignmentProjectID")
                        .HasColumnType("integer");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DeveloperAssignmentProjectID", "DeveloperAssignmentDeveloperID");

                    b.ToTable("Months");
                });

            modelBuilder.Entity("ProjectsInfo.Models.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("DevelopmentHourPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpectedHours")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TestingHourPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("TestingHours")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectsInfo.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsManager")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectsInfo.Models.DeveloperAssignment", b =>
                {
                    b.HasOne("ProjectsInfo.Models.Developer", "Developer")
                        .WithMany("DeveloperAssignments")
                        .HasForeignKey("DeveloperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsInfo.Models.Project", "Project")
                        .WithMany("DeveloperAssignments")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectsInfo.Models.Month", b =>
                {
                    b.HasOne("ProjectsInfo.Models.DeveloperAssignment", "DeveloperAssignment")
                        .WithMany("Months")
                        .HasForeignKey("DeveloperAssignmentProjectID", "DeveloperAssignmentDeveloperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
